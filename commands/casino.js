const { loadUserData, saveUserData } = require("../utils/data");
const path = require("path");
const fs = require("fs");
const moment = require("moment-timezone");

function formatNumber(number) {
  return number.toLocaleString('ru-RU', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
}
function logBigWin(userId, username, amount, balance) {
  const bigWinsFilePath = path.join(__dirname, "bigWins.json");
  let bigWins = [];
  if (fs.existsSync(bigWinsFilePath)) {
    try {
      const data = fs.readFileSync(bigWinsFilePath, "utf-8");
      bigWins = JSON.parse(data);
      if (!Array.isArray(bigWins)) {
        bigWins = [];
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ bigWins.json:", error);
      bigWins = [];
    }
  }
  bigWins.push({
    userId,
    username,
    amount,
    balance,
    timestamp: moment().tz('Europe/Moscow').format('MM-DD HH:mm:ss') // –í—Ä–µ–º—è –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
  });
  if (bigWins.length > 10) {
    bigWins = bigWins.slice(-10);
  }
  try {
    fs.writeFileSync(bigWinsFilePath, JSON.stringify(bigWins, null, 2));
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª bigWins.json:", error);
  }
}

function logAction({ userId, username, action, amount, balance, additionalInfo = "" }) {
  const logFilePath = path.join(__dirname, "logs.txt");
  const logMessage = `[${moment().tz('Europe/Moscow').format('YYYY-MM-DD HH:mm:ss')}] User: ${username} (ID: ${userId}), Action: ${action}, Amount: ${amount}, Balance: ${balance}, ${additionalInfo}\n`;

  fs.appendFile(logFilePath, logMessage, (err) => {
    if (err) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥:", err);
    }
  });
  if (action === 'Casino Win') {
    if ((balance < 10000 && amount >= 0.5 * balance) || (balance >= 20000 && amount >= 0.2 * balance)) {
      logBigWin(userId, username, amount, balance);
    }
  }
}

function updateCasinoBalance() {
  const oneHour = 3600000;
  const lastUpdateTime = Date.now() - oneHour;
  let userData = loadUserData();

  if (!userData.casino) {
    userData.casino = { balance: 0, lastUpdate: 0 };
  }
  if (userData.casino.lastUpdate < lastUpdateTime) {
    userData.casino.balance += 5000;
    userData.casino.lastUpdate = Date.now(); // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    saveUserData(userData);
    console.log("–ë–∞–ª–∞–Ω—Å –∫–∞–∑–∏–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ 5000");
  }
}

  const MAX_BET_AMOUNT = 15000000;
  const COOLDOWN_TIME = 15 * 1000;

  function handleCasino(bot) {
    bot.onText(/\/(–∫–∞–∑–∏–Ω–æ|–∫–∞–∑–∏–∫)(\s+(\d+(\.\d+)?))?/i, (msg, match) => {
      const chatId = msg.chat.id;
      const userId = msg.from.id;
      const betAmount = match[2] ? parseFloat(match[2]) : null;

      let userData = loadUserData();

      if (!userData.casino) {
        userData.casino = { balance: 0 };
      }

      if (!userData[userId]) {
        userData[userId] = { balance: 0, lastCasinoTime: 0 };
      }

      if (betAmount === null) {
        bot.sendMessage(chatId, `–ë–∞–ª–∞–Ω—Å –∫–∞–∑–∏–Ω–æ: ${formatNumber(userData.casino.balance)} –º–æ–Ω–µ—Ç.`);
        return;
      }

      if (isNaN(betAmount) || betAmount <= 0) {
        bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è —Å—Ç–∞–≤–∫–∏.");
        return;
      }

      if (betAmount > MAX_BET_AMOUNT) {
        bot.sendMessage(chatId, `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${formatNumber(MAX_BET_AMOUNT)} –º–æ–Ω–µ—Ç.`);
        return;
      }

      if (userData.casino.balance < betAmount) {
        bot.sendMessage(chatId, "–£ –∫–∞–∑–∏–Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏.");
        return;
      }

      if (userData[userId].balance < betAmount) {
        bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏.");
        return;
      }

      const currentTime = Date.now();
      if (currentTime - userData[userId].lastCasinoTime < COOLDOWN_TIME) {
        const timeLeft = Math.ceil((COOLDOWN_TIME - (currentTime - userData[userId].lastCasinoTime)) / 1000);
        bot.sendMessage(chatId, `–í—ã –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ ${timeLeft} —Å–µ–∫—É–Ω–¥.`);
        return;
      }

      userData[userId].lastCasinoTime = currentTime;

      const buttons = [];
      const mines = [];
      const gridSize = 20; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ –∏–≥—Ä–µ
      const numMines = 11; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω
      while (mines.length < numMines) {
        let randomIndex = Math.floor(Math.random() * gridSize);
        if (!mines.includes(randomIndex)) {
          mines.push(randomIndex);
        }
      }

      for (let i = 0; i < gridSize; i++) {
        buttons.push({
          text: "X",
          callback_data: JSON.stringify({ type: mines.includes(i) ? "mine" : "safe", index: i }),
        });
      }
      bot.sendMessage(chatId, `–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É:\n–°—Ç–∞–≤–∫–∞:  ${formatNumber(betAmount)} –º–æ–Ω–µ—Ç`, {
        reply_markup: {
          inline_keyboard: chunks(buttons, 5), // –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 5 –∫–Ω–æ–ø–æ–∫
        },
      }).then((sentMessage) => {
        const messageId = sentMessage.message_id;
        function handleCallbackQuery(query) {
          const data = JSON.parse(query.data);
          const fromUserId = query.from.id;

          if (data.type !== "mine" && data.type !== "safe") {
            return;
          }

          if (fromUserId !== userId) {
            bot.answerCallbackQuery(query.id, {
              text: "–≠—Ç–∞ –∏–≥—Ä–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞.",
              show_alert: true,
            });
            return;
          }

          let resultMessage = "";

          if (data.type === "safe") {
            if (mines.includes(data.index)) {
              userData[userId].balance -= betAmount;
              userData.casino.balance += betAmount;
              resultMessage = `–í—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ –º–∏–Ω—É! –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ ${formatNumber(betAmount)} –º–æ–Ω–µ—Ç.`;
              logAction({
                userId: userId,
                username: msg.from.username || 'unknown',
                action: 'Casino Lose',
                amount: betAmount,
                result: 'mine',
                balance: userData[userId].balance,
                casinoBalance: userData.casino.balance
              });
            } else {
              userData[userId].balance += betAmount;
              userData.casino.balance -= betAmount;
              resultMessage = `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –í–∞—à –≤—ã–∏–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–∏–ª ${formatNumber(betAmount)} –º–æ–Ω–µ—Ç.`;
              logAction({
                userId: userId,
                username: msg.from.username || 'unknown',
                action: 'Casino Win',
                amount: betAmount,
                result: 'safe',
                balance: userData[userId].balance,
                casinoBalance: userData.casino.balance
              });
            }
          } else if (data.type === "mine") {
            userData[userId].balance -= betAmount;
            userData.casino.balance += betAmount;
            resultMessage = `–í—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ –º–∏–Ω—É! –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏  ${formatNumber(betAmount)} –º–æ–Ω–µ—Ç.`;
            logAction({
              userId: userId,
              username: msg.from.username || 'unknown',
              action: 'Casino Lose',
              amount: betAmount,
              result: 'mine',
              balance: userData[userId].balance,
              casinoBalance: userData.casino.balance
            });
          }
          let gameResultMessage = `–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã:\n\n`;
          for (let i = 0; i < gridSize; i++) {
            gameResultMessage += mines.includes(i) ? "üí•" : "‚úÖ";

            if ((i + 1) % 5 === 0) {
              gameResultMessage += "\n";
            }
          }
          gameResultMessage += `\n\n${resultMessage}\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${formatNumber(userData[userId].balance)}\n–ë–∞–ª–∞–Ω—Å –∫–∞–∑–∏–Ω–æ: ${formatNumber(userData.casino.balance)} –º–æ–Ω–µ—Ç.`;
          bot.sendMessage(chatId, gameResultMessage).then(() => {
            bot.deleteMessage(chatId, messageId).catch((error) => {
              if (error.response && error.response.body && error.response.body.description) {
                if (error.response.body.description.includes("message to delete not found")) {
                } else {
                  console.error("Error while deleting game message:", error.response.body.description);
                }
              } else {
                console.error("Unknown error while deleting game message:", error);
              }
            });
          }).catch((error) => {
            console.error("Error while sending game result message:", error);
          }).finally(() => {
            bot.removeListener("callback_query", handleCallbackQuery);
            saveUserData(userData); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã
          });
        }
        bot.on("callback_query", handleCallbackQuery);
      }).catch((error) => {
        console.error("Error while sending game message:", error);
      });
      function chunks(array, size) {
        let results = [];
        while (array.length) {
          results.push(array.splice(0, size));
        }
        return results;
      }
    });
  bot.onText(/\/–∑–∞–Ω–æ—Å—ã/i, (msg) => {
    const chatId = msg.chat.id;
    const bigWinsFilePath = path.join(__dirname, "bigWins.json");

    if (fs.existsSync(bigWinsFilePath)) {
      try {
        const data = fs.readFileSync(bigWinsFilePath, "utf-8");
        const bigWins = JSON.parse(data);

        if (!Array.isArray(bigWins)) {
          throw new Error("Invalid data format");
        }

        let message = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∫—Ä—É–ø–Ω—ã—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π:\n\n";
        bigWins.forEach((win, index) => {
          message += `${index + 1}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${win.username || 'unknown'}, –í—ã–∏–≥—Ä—ã—à: ${win.amount} –º–æ–Ω–µ—Ç, –ë–∞–ª–∞–Ω—Å: ${win.balance}, –í—Ä–µ–º—è: ${win.timestamp}\n`;
        });

        bot.sendMessage(chatId, message);
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ bigWins.json:", error);
        bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä—É–ø–Ω—ã—Ö –≤—ã–∏–≥—Ä—ã—à–∞—Ö.");
      }
    } else {
      bot.sendMessage(chatId, "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫—Ä—É–ø–Ω—ã—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π.");
    }
  });

  
    const MAX_MULTIPLIER = 1000;
    const INITIAL_CRASH_CHANCE = 0.22; // –ù–∞—á–∞–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
    const INCREMENT = 0.1; // –®–∞–≥ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª—è
    const UPDATE_INTERVAL = 200; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    const COOLDOWN_PERIOD = 5000; // –¢–∞–π–º–µ—Ä –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

    bot.onText(/\/—Ä–∞–∫–µ—Ç–∫–∞ (\d+(?:\.\d)?) (\d+(?:\.\d)?)/i, async (msg, match) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        const betAmount = parseFloat(match[1]);
        const targetMultiplier = parseFloat(match[2]);

        let userData = loadUserData();

        if (!userData.casino) {
            userData.casino = { balance: 0 };
        }

        if (!userData[userId]) {
            userData[userId] = { balance: 0, lastPlay: 0 }; // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–æ lastPlay
        }

        const currentTime = Date.now();
        const lastPlayTime = userData[userId].lastPlay || 0;

        if (currentTime - lastPlayTime < COOLDOWN_PERIOD) {
            const remainingTime = Math.ceil((COOLDOWN_PERIOD - (currentTime - lastPlayTime)) / 1000);
            bot.sendMessage(chatId, `–í—ã –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ ${remainingTime} —Å–µ–∫—É–Ω–¥.`);
            return;
        }

        if (betAmount < 100) {
            bot.sendMessage(chatId, "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 100 –º–æ–Ω–µ—Ç.");
            return;
        }

        if (targetMultiplier < 1.1 || targetMultiplier > MAX_MULTIPLIER) {
            bot.sendMessage(chatId, `–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç 1.1 –¥–æ ${MAX_MULTIPLIER}.`);
            return;
        }

        if (userData.casino.balance < betAmount) {
            bot.sendMessage(chatId, "–£ –∫–∞–∑–∏–Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏.");
            return;
        }

        if (userData[userId].balance < betAmount) {
            bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏.");
            return;
        }

        userData[userId].lastPlay = currentTime; // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞

        let currentMultiplier = 0;
        let rocketCrashed = false;
        const crashChance = (multiplier) => {
            if (multiplier <= 0.1) {
                return INITIAL_CRASH_CHANCE; // –ù–∞—á–∞–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å 22% –ø—Ä–∏ 0.1x
            } else if (multiplier <= 1) {
                return 0.01 + ((multiplier - 0.074) * 0.074);
            } else if (multiplier <= 1.3) {
                return 0.04;
            } else if (multiplier <= 20) {
                return Math.min(0.25, 0.03 + ((multiplier - 1) * 0.03));
            } else {
                let adjustedMultiplier = multiplier - 20;
                return Math.min(0.5, 0.2 + (adjustedMultiplier * 0.02));
            }
        };
        let sentMessage = await bot.sendMessage(chatId, `–†–∞–∫–µ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!`);
        const messageId = sentMessage.message_id;

      const interval = setInterval(() => {
          if (rocketCrashed || currentMultiplier >= targetMultiplier) {
              clearInterval(interval);
              let resultMessage = `–†–∞–∫–µ—Ç–∫–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ ${currentMultiplier.toFixed(1)}x. `;
              if (rocketCrashed) {
                  userData[userId].balance -= betAmount;
                  userData.casino.balance += betAmount; // –î–æ–±–∞–≤–ª–µ–Ω–æ: –±–∞–ª–∞–Ω—Å –∫–∞–∑–∏–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è
                  resultMessage += `–†–∞–∫–µ—Ç–∫–∞ —Å–ª–æ–º–∞–ª–∞—Å—å! –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ ${formatNumber(betAmount)} –º–æ–Ω–µ—Ç.`;
                  logAction({
                      userId: userId,
                      username: msg.from.username || 'unknown',
                      action: 'Rocket Crash',
                      amount: betAmount,
                      balance: userData[userId].balance
                  });
              } else {
                  const winAmount = betAmount * targetMultiplier;
                  userData[userId].balance += winAmount - betAmount;
                  userData.casino.balance -= winAmount - betAmount; // –î–æ–±–∞–≤–ª–µ–Ω–æ: –±–∞–ª–∞–Ω—Å –∫–∞–∑–∏–Ω–æ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è
                  resultMessage += `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${winAmount.toFixed(1)} –º–æ–Ω–µ—Ç!`;
                  logAction({
                      userId: userId,
                      username: msg.from.username || 'unknown',
                      action: 'Rocket Win',
                      amount: winAmount,
                      balance: userData[userId].balance
                  });
              }
              bot.sendMessage(chatId, resultMessage);
              saveUserData(userData);
          } else {
              const rand = Math.random();
              currentMultiplier += INCREMENT;

              if (rand < crashChance(currentMultiplier)) {
                  rocketCrashed = true;
              }
          }
      }, UPDATE_INTERVAL)
    });
}

const MAX_HOLD_MULTIPLIER = 3.2;
const COOLDOWN_PERIOD = 5000; // –¢–∞–π–º–µ—Ä –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

function handleHoldCommand(bot) {
    bot.onText(/\/—Ö–æ–ª–¥ (\d+)/, async (msg, match) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        const betAmount = parseFloat(match[1]);

        let userData = loadUserData();

        if (!userData.casino) {
            userData.casino = { balance: 0 };
        }

        if (!userData[userId]) {
            userData[userId] = { balance: 0, lastPlay: 0 }; // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–æ lastPlay
        }

        const currentTime = Date.now();
        const lastPlayTime = userData[userId].lastPlay || 0;

        if (currentTime - lastPlayTime < COOLDOWN_PERIOD) {
            const remainingTime = Math.ceil((COOLDOWN_PERIOD - (currentTime - lastPlayTime)) / 1000);
            bot.sendMessage(chatId, `–í—ã –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ ${remainingTime} —Å–µ–∫—É–Ω–¥.`);
            return;
        }

        if (betAmount <= 0) {
            bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è —Å—Ç–∞–≤–∫–∏.");
            return;
        }

        if (userData.casino.balance < betAmount) {
            bot.sendMessage(chatId, "–£ –∫–∞–∑–∏–Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏.");
            return;
        }

        if (userData[userId].balance < betAmount) {
            bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏.");
            return;
        }

        userData[userId].lastPlay = currentTime; // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        const slotMessage = await bot.sendDice(chatId, { emoji: 'üé∞' });
        setTimeout(async () => {
            const diceValue = slotMessage.dice.value;
            let multiplier = 0;
            let resultMessage = "üé∞\n";
            if (diceValue === 64) {
                multiplier = 2;
            } else if (diceValue <= 63) {
                multiplier = 0;
            }
            if (multiplier > 0) {
                const winAmount = betAmount * multiplier;
                userData[userId].balance += winAmount - betAmount;
                userData.casino.balance -= winAmount - betAmount;
                resultMessage += `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${multiplier}x –≤–∞—à–µ–π —Å—Ç–∞–≤–∫–∏! üéâ\n`;
            } else {
                userData[userId].balance -= betAmount;
                userData.casino.balance += betAmount;
                resultMessage += "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏ –≤ —ç—Ç–æ—Ç —Ä–∞–∑.\n";
            }

            resultMessage += `–í–∞—à –±–∞–ª–∞–Ω—Å: ${userData[userId].balance}\n–ë–∞–ª–∞–Ω—Å –∫–∞–∑–∏–Ω–æ: ${userData.casino.balance}`;
            logAction({
                userId: userId,
                username: msg.from.username || 'unknown',
                action: multiplier > 0 ? 'Hold Win' : 'Hold Lose',
                amount: betAmount,
                balance: userData[userId].balance,
                casinoBalance: userData.casino.balance
            });
            saveUserData(userData);
            bot.sendMessage(chatId, resultMessage);
        }, 3000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    });

    bot.onText(/\/—Ç–µ—Å—Ç—Ö–æ–ª–¥/, async (msg) => {
        const chatId = msg.chat.id;
        const slotMessage = await bot.sendDice(chatId, { emoji: 'üé∞' });
        setTimeout(() => {
            const diceValue = slotMessage.dice.value;
            bot.sendMessage(chatId, `–†–µ–∑—É–ª—å—Ç–∞—Ç: ${diceValue}`);
        }, 3000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    });
}

module.exports = { handleCasino, updateCasinoBalance, handleHoldCommand };