const { loadUserData, saveUserData } = require("../utils/data");
const { formatCooldownTime } = require("../utils/cooldown");
const path = require("path");
const fs = require("fs");

function logAction({
  userId,
  username,
  action,
  amount,
  balance,
  additionalInfo = "",
}) {
  const logFilePath = path.join(__dirname, "logs.txt");
  const logMessage = `[${new Date().toISOString()}] User: ${username} (ID: ${userId}), Action: ${action}, Amount: ${amount}, Balance: ${balance}, ${additionalInfo}\n`;

  fs.appendFile(logFilePath, logMessage, (err) => {
    if (err) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥:", err);
    }
  });
}

const baseCooldown = 10800000; // 3 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
const baseReward = 4535; // –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞
const cooldownReduction = 7 * 60 * 1000; // –£–º–µ–Ω—å—à–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è

const questions = [
  { question: "–†–∞—Å—à–∏—Ñ—Ä—É–π –ù–°–û", answer: "–Ω–æ—Å" },
  { question: "–§–ª–∞–≥ —á–µ–π —ç—Ç–æ —Å—Ç—Ä–∞–Ω—ã üáßüáÆ", answer: "–ë—É—Ä—É–Ω–¥–∏" },
  // { question: "–§–ª–∞–≥ —á–µ–π —ç—Ç–æ —Å—Ç—Ä–∞–Ω—ã üá®üá¥", answer: "–ö–æ–ª—É–º–±–∏–∏" },
  { question: "–§–ª–∞–≥ —á–µ–π —ç—Ç–æ —Å—Ç—Ä–∞–Ω—ã üá©üá∞", answer: "–î–∞–Ω–∏–∏" },
  // { question: "–§–ª–∞–≥ —á–µ–π —ç—Ç–æ —Å—Ç—Ä–∞–Ω—ã üá™üáπ", answer: "–≠—Ñ–∏–æ–ø–∏–∏" },
  { question: "–§–ª–∞–≥ —á–µ–π —ç—Ç–æ —Å—Ç—Ä–∞–Ω—ã üáÆüáπ", answer: "–ò—Ç–∞–ª–∏–∏" },
  { question: "–¢–∏–º–æ—Ö–∞ —á—É—à–ø–∞–Ω?", answer: "–î–∞" },
  { question: "–ü–∏–¥—Ä –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω 12 –º–∞—Ä—Ç–∞", answer: "–î–∞" },
  { question: "–°–æ–∑–¥–∞—Ç–µ–ª—å –ø–∏–¥—Ä –±–æ—Ç–∞ @karkarich1223", answer: "–ù–µ—Ç" },
  { question: "–§–ª–∞–≥ —á–µ–π —ç—Ç–æ —Å—Ç—Ä–∞–Ω—ã üá≠üáπ", answer: "–ì–∞–∏—Ç–∏" },
  { question: "–ì—Ä—É–ø–ø–µ –û–ü–ì –±–æ—Çi –±–æ–ª—å—à–µ 2 –ª–µ—Ç?", answer: "–î–∞" },
  { question: "–ü–∏—Å—é –ø–æ–ª–∏–º–æ–Ω–∏—à—å?", answer: "–î–∞" }
];

function calculateReward(upgrades) {
  return baseReward * (1 + 0.12 * upgrades); // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –Ω–∞ 10% –∑–∞ –∫–∞–∂–¥–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ
}

function handleQuiz(bot) {
  bot.onText(/\/–≤–æ–ø—Ä–æ—Å—ã/i, (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const username = msg.from.username;

    let userData = loadUserData();

    if (!userData[userId]) {
      userData[userId] = { balance: 0, upgrades: 0 };
    }

    userData[userId].username = username;

    const lastUsage = userData[userId].lastUsage_quiz || 0;
    const currentTime = Date.now();
    const cooldown = baseCooldown - (userData[userId].upgrades || 0) * cooldownReduction;

    if (currentTime - lastUsage < cooldown) {
      const remainingTime = cooldown - (currentTime - lastUsage);
      const formattedTime = formatCooldownTime(remainingTime);
      bot.sendMessage(
        chatId,
        `–ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ ${formattedTime}, –ø—Ä–µ–∂–¥–µ —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É —Å–Ω–æ–≤–∞.`,
      );
    } else {
      const reward = calculateReward(userData[userId].upgrades);
      const questionIndex = Math.floor(Math.random() * questions.length);
      const question = questions[questionIndex];

      bot.sendMessage(chatId, question.question);

      // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
      const waitingForAnswer = (response) => {
        if (response.chat.id === chatId && response.from.id === userId) {
          const userAnswer = response.text.trim();
          const isCorrect = (userAnswer.toLowerCase() === question.answer.toLowerCase());

          if (isCorrect) {
            userData[userId].balance = (userData[userId].balance || 0) + reward;
            bot.sendMessage(chatId, `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –∏ –ø–æ–ª—É—á–∏–ª–∏ ${reward} –º–æ–Ω–µ—Ç.`);
            logAction({
              userId: userId,
              username: username,
              action: 'Quiz Win',
              amount: reward,
              balance: userData[userId].balance,
            });
          } else {
            bot.sendMessage(chatId, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            logAction({
              userId: userId,
              username: username,
              action: 'Quiz Lose',
              amount: 0,
              balance: userData[userId].balance,
            });
          }

          userData[userId].lastUsage_quiz = currentTime;
          saveUserData(userData);
          
          bot.removeListener('message', waitingForAnswer);
        }
      };

      bot.on('message', waitingForAnswer);
    }
  });
}

module.exports = handleQuiz;
